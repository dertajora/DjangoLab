A. This is Django installation steps from scratch
credit : https://github.com/kalebyosua

#1 Create environment coding
python -m venv labderta

#2 Activate environment
labderta\Scripts\activate

#3 Install Django
pip install django

#4 Create first project
django-admin.py startproject django_lab .

#6 Install djangorestframework
pip install djangorestframework

#5 Install pymysql
pip install pymysql

#6 Reuse Dependensi Library
pip install -r /path/to/requirements.txt
Actually we could save all the dependencies / libraries used by our project in requirement.txt, so we only need to install based on that file.

#7 Insert config in __init__.py
import pymysql
pymysql.install_as_MySQLdb()

#8 check if installation done properly
python manage.py runserver

#9 create db django_testing
create manual database in our MySQL server

#10 Create table default from django
python manage.py migrate

#11 Test your django installation.
Open http://127.0.0.1:8000/ in browser

#12 Create super user to access admin panel
python manage.py createsuperuser. Then insert your credential details as requested in command prompt


B. Next Phase : Create Your First API and Print Hello World!!

#1 Create app
python manage.py startapp api_lab (api_lab -> name of applications)

#2 Adjust configuration file
- open  settings.py
- In INSTALLED_APPS --> add your name of application 'api_lab' and 'rest_framework'. 'rest_framework' is used for rest framework libary

#3 Create urls.py in folder /api_lab

#4 Open django_api/urls.py, add this following code to include route from our app (api_lab)

from django.conf.urls import url, include
from django.contrib import admin

urlpatterns = [
    url(r'^admin/', admin.site.urls),
    url(r'^', include('api.urls')),
]

#5 Open views.py then paste it
from django.shortcuts import render
from django.http import HttpResponse


#6 Add this following code in api_lab/views.py .

def home(request):
    return HttpResponse ('Hello World!!')

#7 In api_lab/urls.py paste this following code

from django.conf.urls import url, include
from django.contrib import admin
from . import views

urlpatterns = [
    url(r'^home/$', views.home),

]

#9 Try to open http://127.0.0.1:8000/home/ in your browser

#10 Note
views works like controller in PHP MVC framework


C. Create Middleware

#1 Add file middleware.py at folder api_lab (your project)

#2 Register middleware in settings in Django folder
'api_lab.middleware.simple_middleware',

#3 Define your middleware code, this case I use this following code.
This middleware is aimed to save every request received by application before it is processed.
credit : https://docs.djangoproject.com/en/1.11/topics/http/middleware/

from .core import Logging as log_api
def simple_middleware(get_response):
    # One-time configuration and initialization.

    def middleware(request):
        # Code to be executed for each request before
        # the view (and later middleware) are called.

        # get current path url
        current_path = request.get_full_path()

        # save log from middleware
        log_middleware = [current_path, method, message]

        response = get_response(request)

        # Code to be executed for each request/response after
        # the view is called.

        return response

    return middleware

D. How to use Migration

Migration is really useful when you are working on team or use several different working environment. The main idea of migration is the next user of the code, only need to do migration when they want to
install DB. No need again to import export DB manually and attach it our code.

#1 Define your model file. This is will represent your table when you are call migrate command.

class Product(models.Model):

    product_id = models.IntegerField(primary_key=True)
    product_name = models.TextField(max_length=200)
    product_type = models.CharField(max_length=200)

    def __str__(self):
        return 'product_id : %s' %self.product_id

#2 Run command makemigration to create migration file
python manage.py makemigrations

#3 After migration file generated. Please do migration
python manage.py migrate

#4 Check your DB. Your new table should already sit there

#5 If you want to do adjustment or update your table, you could also do it with migrations. For the example you could add this following code

class Product(models.Model):

    product_id = models.IntegerField(primary_key=True)
    product_name = models.TextField(max_length=200)
    product_type = models.CharField(max_length=200)
    #additional code
    description = models.TextField(max_length=200, default='SOME STRING')
    def __str__(self):
        return 'product_id : %s' %self.product_id

#6 After add code above. Run makemigrations and migrate again
python manage.py makemigrations
python manage.py migrate

E. Importing File in Python

#1 Import from another directory

. means , we jump to upper directory from this current file
so .. means , we double jump to upper directory from this current file
import Logging means we will use file Logging.py
log_yo means alias of our Library, so we could use it when we want to trigger a function using this library
example : from .. import Logging as log_yo

#2 Import from same directory

from . import Laboratorium as test
